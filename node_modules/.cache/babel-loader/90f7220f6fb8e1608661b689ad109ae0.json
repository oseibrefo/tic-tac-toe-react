{"ast":null,"code":"export const gameData = {\n  async save(data) {\n    try {\n      data = await JSON.stringify(data);\n      await localStorage.setItem(\"game_data\", data);\n      return true;\n    } catch (err) {\n      return false;\n    }\n  },\n\n  generateData(maxRounds, nameP1, nameP2) {\n    const game_data = {\n      maxRounds,\n      roundNumber: 1,\n      gameover: false,\n      p1: {\n        nickname: nameP1,\n        score: 0\n      },\n      p2: {\n        nickname: nameP2,\n        score: 0\n      }\n    };\n    return game_data;\n  },\n\n  /*\r\n    const last_round = {\r\n      roundNumber: 1\r\n        winner: {\r\n          player: 1 | 2\r\n      },\r\n  };\r\n    */\n  nextRound(last_round) {\n    const data = this.load();\n    const players_data = {\n      p1: {\n        nickname: data.p1.nickname,\n        score: last_round.winner.player === 1 ? ++data.p1.score : data.p1.score\n      },\n      p2: {\n        nickname: data.p2.nickname,\n        score: last_round.winner.player === 2 ? ++data.p2.score : data.p2.score\n      }\n    };\n\n    if (Math.trunc(data.maxRounds / 2) < players_data.p1.score || Math.trunc(data.maxRounds / 2) < players_data.p2.score) {\n      return {\n        winner: players_data.p1.score > players_data.p2.score ? 1 : 2,\n        p1: players_data.p1,\n        p2: players_data.p2,\n        gameover: true\n      };\n    }\n\n    const next_game_data = {\n      maxRounds: data.maxRounds,\n      roundNumber: ++last_round.roundNumber,\n      gameover: false,\n      p1: players_data.p1,\n      p2: players_data.p2\n    };\n    return next_game_data;\n  },\n\n  load() {\n    const game_data = JSON.parse(localStorage.getItem(\"game_data\"));\n    return game_data;\n  }\n\n};","map":{"version":3,"sources":["C:/Users/HP/Dev/react/ticgame/tic/src/services/data.js"],"names":["gameData","save","data","JSON","stringify","localStorage","setItem","err","generateData","maxRounds","nameP1","nameP2","game_data","roundNumber","gameover","p1","nickname","score","p2","nextRound","last_round","load","players_data","winner","player","Math","trunc","next_game_data","parse","getItem"],"mappings":"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","sourcesContent":["export const gameData = {\r\n\r\n    async save(data) {\r\n        try {\r\n            data = await JSON.stringify(data);\r\n            await localStorage.setItem(\"game_data\", data);\r\n            return true;\r\n        } catch (err) {\r\n            return false;\r\n        }\r\n    },\r\n\r\n    generateData(maxRounds, nameP1, nameP2) {\r\n        const game_data = {\r\n            maxRounds,\r\n            roundNumber: 1,\r\n            gameover: false,\r\n            p1: {\r\n                nickname: nameP1,\r\n                score: 0\r\n            },\r\n            p2: {\r\n                nickname: nameP2,\r\n                score: 0\r\n            },\r\n        }\r\n        return game_data;\r\n    },\r\n\r\n    /*\r\n\r\n    const last_round = {\r\n        roundNumber: 1\r\n\r\n        winner: {\r\n            player: 1 | 2\r\n        },\r\n    };\r\n\r\n    */\r\n\r\n    nextRound(last_round) {\r\n        const data = this.load();\r\n        const players_data = {\r\n            p1: {\r\n                nickname: data.p1.nickname,\r\n                score: (last_round.winner.player === 1) ? ++data.p1.score : data.p1.score\r\n            },\r\n\r\n            p2: {\r\n                nickname: data.p2.nickname,\r\n                score: (last_round.winner.player === 2) ? ++data.p2.score : data.p2.score\r\n            }\r\n        };\r\n\r\n\r\n        if (Math.trunc(data.maxRounds / 2) < players_data.p1.score || Math.trunc(data.maxRounds / 2) < players_data.p2.score) {\r\n            return {\r\n                winner: (players_data.p1.score > players_data.p2.score) ? 1 : 2,\r\n                p1: players_data.p1,\r\n                p2: players_data.p2,\r\n                gameover: true,\r\n            };\r\n        }\r\n\r\n\r\n        const next_game_data = {\r\n            maxRounds: data.maxRounds,\r\n            roundNumber: ++last_round.roundNumber,\r\n            gameover: false,\r\n            p1: players_data.p1,\r\n            p2: players_data.p2,\r\n        }\r\n        return next_game_data;\r\n    },\r\n\r\n    load() {\r\n        const game_data = JSON.parse(localStorage.getItem(\"game_data\"));\r\n        return game_data;\r\n    }\r\n\r\n};\r\n"]},"metadata":{},"sourceType":"module"}