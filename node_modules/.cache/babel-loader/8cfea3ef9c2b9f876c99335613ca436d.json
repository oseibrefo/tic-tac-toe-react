{"ast":null,"code":"import _regeneratorRuntime from\"C:\\\\Users\\\\HP\\\\Dev\\\\react\\\\ticgame\\\\tic\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";import _asyncToGenerator from\"C:\\\\Users\\\\HP\\\\Dev\\\\react\\\\ticgame\\\\tic\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";export var gameData={save:function save(data){return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;_context.next=3;return JSON.stringify(data);case 3:data=_context.sent;_context.next=6;return localStorage.setItem(\"game_data\",data);case 6:return _context.abrupt(\"return\",true);case 9:_context.prev=9;_context.t0=_context[\"catch\"](0);return _context.abrupt(\"return\",false);case 12:case\"end\":return _context.stop();}}},_callee,null,[[0,9]]);}))();},generateData:function generateData(maxRounds,nameP1,nameP2){var game_data={maxRounds:maxRounds,roundNumber:1,gameover:false,p1:{nickname:nameP1,score:0},p2:{nickname:nameP2,score:0}};return game_data;},/*\r\n\r\n    const last_round = {\r\n        roundNumber: 1\r\n\r\n        winner: {\r\n            player: 1 | 2\r\n        },\r\n    };\r\n\r\n    */nextRound:function nextRound(last_round){var data=this.load();var players_data={p1:{nickname:data.p1.nickname,score:last_round.winner.player===1?++data.p1.score:data.p1.score},p2:{nickname:data.p2.nickname,score:last_round.winner.player===2?++data.p2.score:data.p2.score}};if(Math.trunc(data.maxRounds/2)<players_data.p1.score||Math.trunc(data.maxRounds/2)<players_data.p2.score){return{winner:players_data.p1.score>players_data.p2.score?1:2,p1:players_data.p1,p2:players_data.p2,gameover:true};}var next_game_data={maxRounds:data.maxRounds,roundNumber:++last_round.roundNumber,gameover:false,p1:players_data.p1,p2:players_data.p2};return next_game_data;},load:function load(){var game_data=JSON.parse(localStorage.getItem(\"game_data\"));return game_data;}};","map":{"version":3,"sources":["C:/Users/HP/Dev/react/ticgame/tic/src/services/data.js"],"names":["gameData","save","data","JSON","stringify","localStorage","setItem","generateData","maxRounds","nameP1","nameP2","game_data","roundNumber","gameover","p1","nickname","score","p2","nextRound","last_round","load","players_data","winner","player","Math","trunc","next_game_data","parse","getItem"],"mappings":"mUAAA,MAAO,IAAMA,CAAAA,QAAQ,CAAG,CAEdC,IAFc,eAETC,IAFS,CAEH,yOAEIC,CAAAA,IAAI,CAACC,SAAL,CAAeF,IAAf,CAFJ,QAETA,IAFS,qCAGHG,CAAAA,YAAY,CAACC,OAAb,CAAqB,WAArB,CAAkCJ,IAAlC,CAHG,wCAIF,IAJE,0FAMF,KANE,2EAQhB,CAVmB,CAYpBK,YAZoB,uBAYPC,SAZO,CAYIC,MAZJ,CAYYC,MAZZ,CAYoB,CACpC,GAAMC,CAAAA,SAAS,CAAG,CACdH,SAAS,CAATA,SADc,CAEdI,WAAW,CAAE,CAFC,CAGdC,QAAQ,CAAE,KAHI,CAIdC,EAAE,CAAE,CACAC,QAAQ,CAAEN,MADV,CAEAO,KAAK,CAAE,CAFP,CAJU,CAQdC,EAAE,CAAE,CACAF,QAAQ,CAAEL,MADV,CAEAM,KAAK,CAAE,CAFP,CARU,CAAlB,CAaA,MAAOL,CAAAA,SAAP,CACH,CA3BmB,CA6BpB;;;;;;;;;;MAYAO,SAzCoB,oBAyCVC,UAzCU,CAyCE,CAClB,GAAMjB,CAAAA,IAAI,CAAG,KAAKkB,IAAL,EAAb,CACA,GAAMC,CAAAA,YAAY,CAAG,CACjBP,EAAE,CAAE,CACAC,QAAQ,CAAEb,IAAI,CAACY,EAAL,CAAQC,QADlB,CAEAC,KAAK,CAAGG,UAAU,CAACG,MAAX,CAAkBC,MAAlB,GAA6B,CAA9B,CAAmC,EAAErB,IAAI,CAACY,EAAL,CAAQE,KAA7C,CAAqDd,IAAI,CAACY,EAAL,CAAQE,KAFpE,CADa,CAMjBC,EAAE,CAAE,CACAF,QAAQ,CAAEb,IAAI,CAACe,EAAL,CAAQF,QADlB,CAEAC,KAAK,CAAGG,UAAU,CAACG,MAAX,CAAkBC,MAAlB,GAA6B,CAA9B,CAAmC,EAAErB,IAAI,CAACe,EAAL,CAAQD,KAA7C,CAAqDd,IAAI,CAACe,EAAL,CAAQD,KAFpE,CANa,CAArB,CAaA,GAAIQ,IAAI,CAACC,KAAL,CAAWvB,IAAI,CAACM,SAAL,CAAiB,CAA5B,EAAiCa,YAAY,CAACP,EAAb,CAAgBE,KAAjD,EAA0DQ,IAAI,CAACC,KAAL,CAAWvB,IAAI,CAACM,SAAL,CAAiB,CAA5B,EAAiCa,YAAY,CAACJ,EAAb,CAAgBD,KAA/G,CAAsH,CAClH,MAAO,CACHM,MAAM,CAAGD,YAAY,CAACP,EAAb,CAAgBE,KAAhB,CAAwBK,YAAY,CAACJ,EAAb,CAAgBD,KAAzC,CAAkD,CAAlD,CAAsD,CAD3D,CAEHF,EAAE,CAAEO,YAAY,CAACP,EAFd,CAGHG,EAAE,CAAEI,YAAY,CAACJ,EAHd,CAIHJ,QAAQ,CAAE,IAJP,CAAP,CAMH,CAGD,GAAMa,CAAAA,cAAc,CAAG,CACnBlB,SAAS,CAAEN,IAAI,CAACM,SADG,CAEnBI,WAAW,CAAE,EAAEO,UAAU,CAACP,WAFP,CAGnBC,QAAQ,CAAE,KAHS,CAInBC,EAAE,CAAEO,YAAY,CAACP,EAJE,CAKnBG,EAAE,CAAEI,YAAY,CAACJ,EALE,CAAvB,CAOA,MAAOS,CAAAA,cAAP,CACH,CA1EmB,CA4EpBN,IA5EoB,gBA4Eb,CACH,GAAMT,CAAAA,SAAS,CAAGR,IAAI,CAACwB,KAAL,CAAWtB,YAAY,CAACuB,OAAb,CAAqB,WAArB,CAAX,CAAlB,CACA,MAAOjB,CAAAA,SAAP,CACH,CA/EmB,CAAjB","sourcesContent":["export const gameData = {\r\n\r\n    async save(data) {\r\n        try {\r\n            data = await JSON.stringify(data);\r\n            await localStorage.setItem(\"game_data\", data);\r\n            return true;\r\n        } catch (err) {\r\n            return false;\r\n        }\r\n    },\r\n\r\n    generateData(maxRounds, nameP1, nameP2) {\r\n        const game_data = {\r\n            maxRounds,\r\n            roundNumber: 1,\r\n            gameover: false,\r\n            p1: {\r\n                nickname: nameP1,\r\n                score: 0\r\n            },\r\n            p2: {\r\n                nickname: nameP2,\r\n                score: 0\r\n            },\r\n        }\r\n        return game_data;\r\n    },\r\n\r\n    /*\r\n\r\n    const last_round = {\r\n        roundNumber: 1\r\n\r\n        winner: {\r\n            player: 1 | 2\r\n        },\r\n    };\r\n\r\n    */\r\n\r\n    nextRound(last_round) {\r\n        const data = this.load();\r\n        const players_data = {\r\n            p1: {\r\n                nickname: data.p1.nickname,\r\n                score: (last_round.winner.player === 1) ? ++data.p1.score : data.p1.score\r\n            },\r\n\r\n            p2: {\r\n                nickname: data.p2.nickname,\r\n                score: (last_round.winner.player === 2) ? ++data.p2.score : data.p2.score\r\n            }\r\n        };\r\n\r\n\r\n        if (Math.trunc(data.maxRounds / 2) < players_data.p1.score || Math.trunc(data.maxRounds / 2) < players_data.p2.score) {\r\n            return {\r\n                winner: (players_data.p1.score > players_data.p2.score) ? 1 : 2,\r\n                p1: players_data.p1,\r\n                p2: players_data.p2,\r\n                gameover: true,\r\n            };\r\n        }\r\n\r\n\r\n        const next_game_data = {\r\n            maxRounds: data.maxRounds,\r\n            roundNumber: ++last_round.roundNumber,\r\n            gameover: false,\r\n            p1: players_data.p1,\r\n            p2: players_data.p2,\r\n        }\r\n        return next_game_data;\r\n    },\r\n\r\n    load() {\r\n        const game_data = JSON.parse(localStorage.getItem(\"game_data\"));\r\n        return game_data;\r\n    }\r\n\r\n};\r\n"]},"metadata":{},"sourceType":"module"}